#!/bin/sh

# wrapper for mympiexec.sh/mpiexec.
#
# This commands expects a minimal mpiexec syntax, that is:
#    espp_mpiexec.sh -n <processors> <command> <params>...
# unlike standard mpiexec, <processors> can also be "nompi",
# in which case the command runs the command directly,
# bypassing any mpi invocation.
#
# Exit codes are from the executed program, or
#
# 170 if mpiexec was disabled by user request
#
# 171 if no mpiexec command or script was found
#
# 1 if the command line was wrong
#

MYMPIEXEC=@MYMPIEXEC@
MPIEXEC=@MPIEXEC@

# get number of processors
# since we do basic mpiexec, -n should always be
# the first parameter
if test "$1" != "-n"; then
    echo "$0: usage: $0 -n <processors> <program> <params>..." 1>&2
    exit 1
fi

# check whether we are requested to run without MPI
###################################################
processors="$2"
if test "$processors" = "nompi"; then

    # remove -n single, which should leave the command
    shift; shift

    # check the program is actually one
    if test ! -x "$1"; then
        echo "$0: program $1 not executable." 1>&2
        exit 1
    fi

    exec "$@"
fi

# normal run using MPI
######################

# find correct binary
if test "x$MYMPIEXEC" = "x"; then
    mpiexec=
    reason=170
elif test -x "$MYMPIEXEC"; then
    mpiexec=$MYMPIEXEC
elif test -x "$MPIEXEC"; then
    mpiexec=$MPIEXEC
else
    mpiexec=
    reason=171
fi

# and execute, if possible
if test -x "$mpiexec"; then

   exec $mpiexec "$@"

else

   exit $reason

fi
