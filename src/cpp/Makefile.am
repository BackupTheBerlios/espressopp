SUBDIRS = logging hello

EXTRA_DIST = __init__.py.template
CLEANFILES = __init__.py __init__.pyc

if HAVE_MPI
  SUBDIRS += mpi pmi
else
  EXTRA_DIST += mpi pmi
endif

# make the dll's in this directory available even in the
# build tree
include $(top_srcdir)/build-aux/macros/axes_dllfixup.am
all-local: dllfixup __init__.py
clean-local: dllclean

AM_CPPFLAGS = $(BOOST_CPPFLAGS) $(LOG4ESPP_CPPFLAGS)
AM_LDFLAGS = $(BOOST_LDFLAGS)

# the common part of all Espresso flavors
noinst_LTLIBRARIES = libespresso_common.la

# this actually builds the main espresso library
lib_LTLIBRARIES = libespresso.la

pkglib_SCRIPTS = __init__.py

# and this target builds the shared library wrapper
pkglib_LTLIBRARIES = _espresso.la
# and this one the program wrapper
bin_PROGRAMS = espresso

nobase_pkginclude_HEADERS = \
	espresso.hpp \
	logging.hpp \
	hello.hpp

if HAVE_MPI
nobase_pkginclude_HEADERS += mpi.hpp
endif

# rules for the common Espresso library
libespresso_common_la_SOURCES= espresso_bindings.cpp
libespresso_common_la_LIBADD = \
	hello/libhello.la \
	logging/liblogging.la \
	$(BOOST_PYTHON_LIBS) $(LOG4ESPP_LIBS)

if HAVE_MPI
libespresso_common_la_LIBADD += \
	pmi/libpmi.la \
	mpi/libmpi.la \
	$(BOOST_MPI_LIBS)
endif

# rules for the python module wrapper
_espresso_la_SOURCES = _espresso.cpp
_espresso_la_LDFLAGS = -module -no-undefined 
_espresso_la_LIBADD = libespresso_common.la

# rules for the program wrapper
espresso_SOURCES = espresso.cpp
espresso_LDADD = libespresso_common.la

# rules for the shared library
libespresso_la_SOURCES =
libespresso_la_LDFLAGS = -no-undefined 
libespresso_la_LIBADD = libespresso_common.la

# due to GNU standards that require make prefix= to change the
# installation path, autogenerated python cannot be done via
# autoconf
__init__.py: __init__.py.template Makefile
	sed -e "s,[@]pkgpythondir[@],$(pkgdatadir)," $< > $@
